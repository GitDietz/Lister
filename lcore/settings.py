"""
Django settings for lcore project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import datetime
import os
import socket
import logging.config
from decouple import config
from django.utils.log import DEFAULT_LOGGING

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# print(f'Base dir is: {BASE_DIR}')
# reading config variables
EMAIL_KEY = config('MAIL_API_KEY') # no default or cast used
EMAIL_FROM = config('MAIL_SENDER')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('NEW_SK')
PASSWORD_RESET_TIMEOUT = 600
ACCOUNT_INVITATION_DAYS = datetime.timedelta(days=3)
REGISTRATIONS = True

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

soc = socket.gethostname()
if soc.endswith('.local') or 'Dieter' in soc:
    ALLOWED_HOSTS = ['example.com', '127.0.0.1', 'localhost', ]
else:
    ALLOWED_HOSTS = ['getafix.pythonanywhere.com']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # third party
    'crispy_forms',
    #local
    'the_list',
    'act',
]

SITE_ID = 1

CRISPY_TEMPLATE_PACK = 'bootstrap4'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'lcore.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'lcore.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'listapp',
        'USER': config('DB_USER_ADMIN'),
        'PASSWORD': config('DB_ADMIN_PW'),
        'HOST': 'localhost',
        'PORT': '5432',
    },
    'original': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Australia/Brisbane'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
LOGIN_URL = '/login/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
# print(f'Static files dir is: {STATICFILES_DIRS}')
STATIC_ROOT = os.path.join(BASE_DIR, "static_cdn")
# print(f'Static root is :{STATIC_ROOT}')
# LOGGING CONFIG
LOG_ROOT = os.path.join(BASE_DIR, 'logs')
LOG_ERROR = os.path.join(LOG_ROOT, 'ErrorLoggers.log')
LOG_INFO = os.path.join(LOG_ROOT, 'InfoLoggers.log')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'large': {
            'format': '%(asctime)s  %(levelname)s  %(process)d  %(funcName)s  %(lineno)d  %(message)s  '
        },
        'med': {
            'format': '%(asctime)s  %(levelname)s [%(module)s-%(funcName)s] %(message)s'
        },
        'tiny': {
            'format': '%(asctime)s  %(message)s'
        }
    },
    'handlers': {
        'errors_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'when': 'midnight',
            'interval': 1,
            'filename': LOG_ERROR,
            'formatter': 'large',
        },
        'info_file': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'when': 'midnight',
            'interval': 1,
            'filename': LOG_INFO,
            'formatter': 'med',
            },
    },
    'loggers': {
        'error_logger': {
            'handlers': ['errors_file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'info_logger': {
            'handlers': ['info_file'],
            'level': 'INFO',
            'propagate': False,
            },
        },
    }